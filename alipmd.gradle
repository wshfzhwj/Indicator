apply plugin: 'pmd'

dependencies {
    //如果不使用阿里规约则此处不需要dependencies，只需将工具版本注释打开即可
//    pmd files("${project.rootDir}/codecheck/libs/p3c-pmd-1.3.6.jar",
//            "${project.rootDir}/codecheck/libs/pmd-core-5.5.2.jar",
//            "${project.rootDir}/codecheck/libs/pmd-java-5.5.2.jar",
//            "${project.rootDir}/codecheck/libs/commons-lang3-3.4.jar",
//            "${project.rootDir}./codecheck/libs/commons-io-2.4.jar",
//            "${project.rootDir}/codecheck/libs/asm-5.0.4.jar",
//            "${project.rootDir}/codecheck/libs/gson-2.5.jar",
//            "${project.rootDir}/codecheck/libs/jaxen-1.1.6.jar")

    pmd files("../p3c-pmd-2.1.1-jar-with-dependencies.jar")
}


pmd {
    //工具版本
//    toolVersion '6.9.0'
    //配置文件路径
    ruleSetFiles = files("${project.rootDir}/codecheck/ruleset.xml")

    reportsDir = file("${project.buildDir}/reports/pmd")
}

task pmd(type: Pmd, group: 'verification') {
    ignoreFailures = false
    try {//try一下，即使发生异常也不影响正常编译

        def isCheck = true //是否打开代码规范检查的开关
        def isCommit = project.hasProperty('checkCommit') //是否是提交前检查
        if (isCheck) {
            if (isCommit) {
                //检测代码路径
                source project.rootDir //--- 检查项目中所有的文件, 比较慢, 下面分模块检查, 主要是src下面的java文件
//                source 'xxx/src'
//                source 'lib-xxx/src'
//                source '../app/src' //submodules的检查

                //排除项
                exclude '**/gen/**'
                exclude '**/test/**'
                exclude '**/res/**'
                exclude '**/androidTest/**'
                exclude '**/R.java'
                exclude '**/BuildConfig.java'

                //判断是否是git pre-commit hook触发的pmd
                //如果是，只检测要提交的java文件，否则检测路径下的所有java文件
                if (project.hasProperty('checkCommit') && project.property("checkCommit")) {
                    def ft = filterCommitter(getChangeFiles())
                    def includeList = new ArrayList<String>()
                    for (int i = 0; i < ft.size(); i++) {
                        String spliter = ft.getAt(i)
                        String[] spliterlist = spliter.split("/")
                        String fileName = spliterlist[spliterlist.length - 1]
                        includeList.add("**/" + fileName)
                    }
                    if (includeList.size() == 0) {
                        exclude '**/*.java'
                    } else {
                        println("includeList==" + includeList)
                        include includeList
                    }
                } else {
                    include '**/*.java'
                }
                classpath = files()

            } else { //如果不是提交触发的，也就是对项目进行构建，那么需要对pre-commit文件进行copy
                def forceCopy = true //如有需要，可以强制去更新客户端的pre-commit文件
                try {
                    copyPreCommitFile(forceCopy)
                    //copySubmodulesPreCommitFile(forceCopy)
                } catch (Exception e) {
                    println(e)
                }
            }
        }

    }catch (Exception e){
        println("pmd catch an exception.")
        e.printStackTrace()
    }
}

//src是一个文件路径，target是一个目录路径
def copyFile(boolean forceUpdate, String src, String target){
    def fileName = "pre-commit"
    def targetFile = file(target + "/" + fileName)

    if(targetFile.exists() && targetFile.isFile() && !forceUpdate){ //目标文件存在且没有强制更新，不需要copy操作
        println(targetFile.absolutePath + " exist.")
    }else {
        //targetFile.delete()
        def srcFile = file(src)
        if (srcFile.isFile()) {
            copy {
                from srcFile
                into target
            }
        }
    }

    //targetFile = file(target + "/" + fileName)
    if(targetFile.isFile()) {
        if (!targetFile.canExecute()) {
            targetFile.setExecutable(true)
        }
        if (!targetFile.canWrite()) {
            targetFile.setWritable(true)
        }
    }
}

//把根目录下的pre-commit文件复制到.git-->hooks目录
def copyPreCommitFile(boolean forceUpdate){

    def src = "${project.rootDir}/codecheck/pre-commit"
    def target = "${project.rootDir}/.git/hooks"
    copyFile(forceUpdate, src, target)

    println("copyPreCommitFile")
}

//把submodules目录下的pre-commit文件复制到.git-->modules-->submodules-->XXXmoudles-->hooks 目录
def copySubmodulesPreCommitFile(boolean forceUpdate){

    def src = "${project.rootDir}/submodules/pre-commit"
    def submodulesDir = "${project.rootDir}/.git/modules/submodules"
    File file = new File(submodulesDir)
    File[] fileList = file.listFiles()
    if(fileList != null && fileList.length > 0) {
        def size = fileList.length
        for (int i = 0; i < size; i++) {
            if (fileList[i].isDirectory()) {
                //target = "${project.rootDir}/.git/modules/submodules/XXX/hooks"
                def target = submodulesDir + "/" + fileList[i].getName() + "/hooks"
                copyFile(forceUpdate, src, target)
            }
        }
    }

    println("copySubmodulesPreCommitFile")
}

//过滤java文件
def filterCommitter(String info) {
    ArrayList<String> filterList = new ArrayList<String>()
    String[] lines = info.split("\\n")
    for (String line : lines) {
        if (line.contains(".java")) {
            String[] split = line.trim().split(" ")
            for (String str : split) {
                if (str.contains(".java")) {
                    filterList.add(str)
                }
            }
        }
    }
    return filterList
}

//获取git commit待提交的文件列表
def getChangeFiles() {
    try {
        String changeInfo = 'git status -s'.execute(null, project.rootDir).text.trim()
        return changeInfo == null ? "" : changeInfo
    } catch (Exception e) {
        return ""
    }
}